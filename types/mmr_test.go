// Go Substrate RPC Client (GSRPC) provides APIs and types around Polkadot and any Substrate-based chain RPC calls
//
// Copyright 2019 Centrifuge GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package types_test

import (
	"encoding/json"
	"testing"

	"github.com/olegnn/go-substrate-rpc-client/v4/types"
	. "github.com/olegnn/go-substrate-rpc-client/v4/types"
)

func TestGenerateMMRProofResponse_Unmarshal(t *testing.T) {
	jsonData := map[string]interface{}{
		"blockHash": "0x4a865a4b3f6f7033202f3a6429627cffe60c3760826c0ad0625b383ba4c5c8ff",
		"leaf":      "0x45020000000000bf08ab73b3ae2d46e701871749840a983d6c1653f0db36f0c6a2590dd37a8747010000000000000001000000aeb47a269393297f4b0a3c9c9cfd00c7a4195255274cf39d83dabc2fcc9ff3d700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"proof":     "0x000000000000000054000000000000001c37dd00f35205d0336a6874a59ae6c696095e8f99e71546f51b3de765b8e0c5d16ec49e692f4eed877bb35298ca2dd4c923d415396e54b2a5296ec696dfff119f3065bcb5b28d139baffde7a9c8270fa508bd6661d87b2a04e6eaed53fbc95b4803ba22b62e55f36ac3f27168f5bd66eec5ee854ccea9b5f0d621eb3aedc639f743528b5338febbdcec1ceeb8f7c0429a05827908d2a3dc36dc97a449c52627eec3b768740b3f648d4ee9fb2287bf2321b821c12f1c1a9ab33a7c98044350abb0f9d0626777ed2ee6f6273bc5a91a34568e19b1523e93487fdbdf696ab5e8ca11",
	}

	marshalled, err := json.Marshal(jsonData)
	if err != nil {
		panic(err)
	}

	expected := GenerateMMRProofResponse{BlockHash: types.H256{0x4a, 0x86, 0x5a, 0x4b, 0x3f, 0x6f, 0x70, 0x33, 0x20, 0x2f, 0x3a, 0x64, 0x29, 0x62, 0x7c, 0xff, 0xe6, 0xc, 0x37, 0x60, 0x82, 0x6c, 0xa, 0xd0, 0x62, 0x5b, 0x38, 0x3b, 0xa4, 0xc5, 0xc8, 0xff}, Leaf: types.MMRLeaf{Version: 0x0, ParentNumberAndHash: types.ParentNumberAndHash{ParentNumber: 0x0, Hash: types.Hash{0xbf, 0x8, 0xab, 0x73, 0xb3, 0xae, 0x2d, 0x46, 0xe7, 0x1, 0x87, 0x17, 0x49, 0x84, 0xa, 0x98, 0x3d, 0x6c, 0x16, 0x53, 0xf0, 0xdb, 0x36, 0xf0, 0xc6, 0xa2, 0x59, 0xd, 0xd3, 0x7a, 0x87, 0x47}}, BeefyNextAuthoritySet: types.BeefyNextAuthoritySet{ID: 0x1, Len: 0x1, Root: types.H256{0xae, 0xb4, 0x7a, 0x26, 0x93, 0x93, 0x29, 0x7f, 0x4b, 0xa, 0x3c, 0x9c, 0x9c, 0xfd, 0x0, 0xc7, 0xa4, 0x19, 0x52, 0x55, 0x27, 0x4c, 0xf3, 0x9d, 0x83, 0xda, 0xbc, 0x2f, 0xcc, 0x9f, 0xf3, 0xd7}}, ParachainHeads: types.H256{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, MessageCommitmentRoot: types.H256{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}, Proof: types.MMRProof{LeafIndex: 0x0, LeafCount: 0x54, Items: []types.H256{{0x37, 0xdd, 0x0, 0xf3, 0x52, 0x5, 0xd0, 0x33, 0x6a, 0x68, 0x74, 0xa5, 0x9a, 0xe6, 0xc6, 0x96, 0x9, 0x5e, 0x8f, 0x99, 0xe7, 0x15, 0x46, 0xf5, 0x1b, 0x3d, 0xe7, 0x65, 0xb8, 0xe0, 0xc5, 0xd1}, {0x6e, 0xc4, 0x9e, 0x69, 0x2f, 0x4e, 0xed, 0x87, 0x7b, 0xb3, 0x52, 0x98, 0xca, 0x2d, 0xd4, 0xc9, 0x23, 0xd4, 0x15, 0x39, 0x6e, 0x54, 0xb2, 0xa5, 0x29, 0x6e, 0xc6, 0x96, 0xdf, 0xff, 0x11, 0x9f}, types.H256{0x30, 0x65, 0xbc, 0xb5, 0xb2, 0x8d, 0x13, 0x9b, 0xaf, 0xfd, 0xe7, 0xa9, 0xc8, 0x27, 0xf, 0xa5, 0x8, 0xbd, 0x66, 0x61, 0xd8, 0x7b, 0x2a, 0x4, 0xe6, 0xea, 0xed, 0x53, 0xfb, 0xc9, 0x5b, 0x48}, types.H256{0x3, 0xba, 0x22, 0xb6, 0x2e, 0x55, 0xf3, 0x6a, 0xc3, 0xf2, 0x71, 0x68, 0xf5, 0xbd, 0x66, 0xee, 0xc5, 0xee, 0x85, 0x4c, 0xce, 0xa9, 0xb5, 0xf0, 0xd6, 0x21, 0xeb, 0x3a, 0xed, 0xc6, 0x39, 0xf7}, types.H256{0x43, 0x52, 0x8b, 0x53, 0x38, 0xfe, 0xbb, 0xdc, 0xec, 0x1c, 0xee, 0xb8, 0xf7, 0xc0, 0x42, 0x9a, 0x5, 0x82, 0x79, 0x8, 0xd2, 0xa3, 0xdc, 0x36, 0xdc, 0x97, 0xa4, 0x49, 0xc5, 0x26, 0x27, 0xee}, types.H256{0xc3, 0xb7, 0x68, 0x74, 0xb, 0x3f, 0x64, 0x8d, 0x4e, 0xe9, 0xfb, 0x22, 0x87, 0xbf, 0x23, 0x21, 0xb8, 0x21, 0xc1, 0x2f, 0x1c, 0x1a, 0x9a, 0xb3, 0x3a, 0x7c, 0x98, 0x4, 0x43, 0x50, 0xab, 0xb0}, types.H256{0xf9, 0xd0, 0x62, 0x67, 0x77, 0xed, 0x2e, 0xe6, 0xf6, 0x27, 0x3b, 0xc5, 0xa9, 0x1a, 0x34, 0x56, 0x8e, 0x19, 0xb1, 0x52, 0x3e, 0x93, 0x48, 0x7f, 0xdb, 0xdf, 0x69, 0x6a, 0xb5, 0xe8, 0xca, 0x11}}}}

	var unmarshalled GenerateMMRProofResponse

	json.Unmarshal(marshalled, &unmarshalled)

	assertEqual(t, unmarshalled, expected)
}
